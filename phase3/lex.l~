%{
	#include "y.tab.h"
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	int lineCounter = 1;
	char *str_dup (const char *s);
	extern int printLineNumber(int num);
%}
letter  [a-zA-Z]
digit [0-9]
digits {digit}+
id {letter}({letter}|{digit})*
num "-"?{digits}
fnum "-"?{digits}.{digits}("E"{digits}+)?
relop "=="|"!="|">"|">="|"<"|"<="
boolop "&&"|"||"
op "+"|"-"|"*"|"/"|"%"
binary "true"|"false"
%%
"System.out.println"	{return SYSTEM_OUT;}
"if"	{return IF_WORD;}
"else"	{return ELSE_WORD;}
"while"	{return WHILE_WORD;}
"for"	{return FOR_WORD;}
"int"	{return INT_WORD;}
"float"	{return FLOAT_WORD;}
"boolean" {return BOOLEAN_WORD;}
{op}	{yylval.opLexVal = str_dup(yytext); return ARITH_OP;}
{num}	{yylval.iVal = atoi(yytext); return INT;}
{fnum}	{yylval.fVal = atof(yytext); return FLOAT;}
{relop} {yylval.opLexVal = str_dup(yytext); return RELA_OP;}
{boolop} {yylval.opLexVal = str_dup(yytext); return BOOL_OP;}
{binary} {if(!strcmp(yytext,"true")){ yylval.boolVal = 1;} else { yylval.boolVal = 0;} return BOOL;}
{id}	{yylval.idLexVal = str_dup(yytext);return IDENTIFIER;}
";" { return SEMI_COLON;}
"=" {return EQUALS;}
"(" { return LEFT_BRACKET;}
")" {return RIGHT_BRACKET;}
"{" {return LEFT_BRACKET_CURLY;}
"}" {return RIGHT_BRACKET_CURLY;}
\n	{++lineCounter;	printLineNumber(lineCounter);}
%%


int yywrap() {
   // open next reference or source file and start scanning
   return 1;
}

char *str_dup (const char *s) {
    char *d = (char *) malloc (strlen (s) + 1);   // Space for length plus nul
    if (d == NULL) return NULL;          // No memory
    strcpy (d,s);                        // Copy the characters
    return d;                            // Return the new string
}
